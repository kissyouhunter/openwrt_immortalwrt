#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt X86_immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      set_kernel:
        description: "KERNEL: 4.14.y / 4.19.y"
        required: false
        default: "4.19.y"
        type: choice
        options:
          - "4.19.y"
          - "4.14.y"
      set_kernel_version:
        description: "输入具体内核版本:"
        required: false
        default: "4.19.x"
      upload_firmware:
        description: "whether to  upload firmware."
        required: false
        default: "false"
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-18.06
  FEEDS_CONF: immortalwrt_4.19.feeds.conf.default
  CONFIG_FILE: x86_immortalwrt_4.19.config
  DIY_P2_SH: diy-part2_x86_immortalwrt.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  SERVERCHAN_SCKEY: true
  USE_CACHEWRTBUILD: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: choose kernel
      run: |
        set_kernel="${{ github.event.inputs.set_kernel }}"
        if [ "$set_kernel" = "4.14.y" ]; then
            file="diy-part1_x86_immortalwrt_4.14.sh"
        elif [ "$set_kernel" = "4.19.y" ]; then
            file="diy-part1_x86_immortalwrt_4.19.sh"
        fi
        echo "DIY_P1_SH=${file}" >> $GITHUB_ENV
        echo "KERNEL_VERSION=${{ github.event.inputs.set_kernel_version }}" >> $GITHUB_ENV
        upload_firmware="${{ github.event.inputs.upload_firmware }}"
        echo "UPLOAD_FIRMWARE=${upload_firmware}" >> $GITHUB_ENV

        NUMBER=$(echo "${KERNEL_VERSION}" | awk -F'.' '{print $NF}')
        echo ${NUMBER}
        sed -i 's/VERSION_NUMBER/${NUMBER}/g' $DIY_P1_SH
        KERNEL_SHA256=$(curl -sS https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/sha256sums.asc | grep linux-${KERNEL_VERSION}.tar.xz | awk '{print $1}')
        echo ${KERNEL_SHA256}
        sed -i 's/NEW_SHA256/${KERNEL_SHA256}/g' $DIY_P1_SH
        cat $DIY_P1_SH
    
    - name: telegrame_bot
      run: |
        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c > CPU
        cat /proc/cpuinfo | grep "cpu cores" | uniq >> CPU
        sed -i 's|[[:space:]]||g; s|^.||' CPU && sed -i 's|CPU||g; s|pucores:||' CPU
        CPUNAME="$(awk 'NR==1' CPU)" && CPUCORES="$(awk 'NR==2' CPU)"
        rm -rf CPU
        if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：
          您正在使用kissyouhunter仓库的  {CPU型号为 [ ${CPUNAME} ] 核心数 为 [ ${CPUCORES} ] 线程数为 [ $(nproc) ]的机器} 编译 ${{ github.event.inputs.set_kernel_version }} immortalwrt 的固件,请耐心等待...... 😋" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        fi 
        
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get update
        sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/kissyouhunter/openwrt_lede/main/diy/dependency/depends-ubuntu-2004)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
 
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        cat /proc/cpuinfo | grep 'model name' | head -1
        git clone -b $REPO_BRANCH --single-branch $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    #- name: load cache
    #  if: env.USE_CACHEWRTBUILD == 'true'
    #  uses: klever1988/cachewrtbuild@test
    #  with:
    #    ccache: 'true'
    #    prefix: ${{ github.workspace }}/openwrt        

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: chmod
      run: |
        cd openwrt
        chmod -R 755 .
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages config.buildinfo feeds.buildinfo immortalwrt-x86-64-generic-kernel.bin immortalwrt-x86-64-generic-squashfs-rootfs.img.gz immortalwrt-x86-64-generic.manifest profiles.json sha256sums version.buildinfo
        if [ "$DIY_P1_SH" = "diy-part1_x86_immortalwrt_4.19.sh" ]; then 
            mv immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz immortalwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv immortalwrt-x86-64-generic-squashfs-combined.img.gz immortalwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv immortalwrt-x86-64-generic-rootfs.tar.gz immortalwrt-x86-64-4.19.Y-generic-rootfs.tar.gz
        elif [ "$DIY_P1_SH" = "diy-part1_x86_immortalwrt_4.14.sh" ]; then
            mv immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz immortalwrt-x86-64-${KERNEL_VERSION}-combined-efi.img.gz
            mv immortalwrt-x86-64-generic-squashfs-combined.img.gz immortalwrt-x86-64-${KERNEL_VERSION}-combined.img.gz
            mv immortalwrt-x86-64-generic-rootfs.tar.gz immortalwrt-x86-64-4.14.Y-generic-rootfs.tar.gz
        fi
        echo "IMMORTALWRT=immortalwrt-x86-64-${KERNEL_VERSION}" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: ${{ env.IMMORTALWRT }}
        path: ${{ env.FIRMWARE }}

    #- name: Upload firmware to cowtransfer
    #  id: cowtransfer
    #  if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
    #    echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    #    echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    #- name: Upload firmware to WeTransfer
    #  id: wetransfer
    #  if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
    #  run: |
    #    curl -fsSL git.io/file-transfer | sh
    #    ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
    #    echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    #    echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    #- name: Generate release tag
    #  id: tag
    #  if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #  run: |
    #    echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
    #    touch release.txt
    #    [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
    #    [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
    #    echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        token: ${{ secrets.REPO_TOKEN }}
        name:  Openwrt_X86_without_docker
        tag: openwrt_x86
        commit: main
        allowUpdates: true
        repo: Openwrt_X86-Openwrt_N1-Armbian_N1
        body: |
          ## Openwrt_X86:

          * lede 大雕 openwrt 内核 5.4 5.10 and 5.15 (5.15为精简旁路由版)

          * immortalwrt 天灵 openwrt 内核 4.19 and openwrt 21.02-5.4 旁路由

          * lienol openwrt 22.03 内核 5.10 (无密码)

          * IP: 192.168.2.3 ID: root Password: password

          * adguardhome已内置好DNS和广告过滤，下载好核心后开启即可。

          * adguardhome ID: root Password: password

          * rootfs 文件是lxc专用，例如PVE的CT模板。([教程](https://nb0.cc/lxc))

          * x86固件不带docker,请用一键脚本自行安装。

          * （一键脚本： bash <(curl -s -S -L nb0.cc/kiss) 或者 curl -Lo kiss.sh nb0.cc/kiss && bash kiss.sh）
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Setup Rclone
      uses: AnimMouse/setup-rclone@v1
      with:
        rclone_config: ${{ secrets.RCLONE_CONFIG }}

    - name: Upload to OneDrive
      run: |
        cd openwrt/bin/targets/*/*
        mkdir -p upload && mv *.gz upload/
        rclone -v move upload jollifia_kisse5:onedrive/OPENWRT/X86_OP

    - name: Notify on failure
      if: ${{ failure() }}
      run: |
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的😭主人😭：
          您使用kissyouhunter仓库的 ${{ github.event.inputs.set_kernel_version }} immortalwrt 固件顺利失败了，请及时处理！😭" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: telegram_bot
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "true" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨：
          您使用kissyouhunter仓库的 ${{ github.event.inputs.set_kernel_version }} immortalwrt 固件顺利编译完成了！💐" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        fi
